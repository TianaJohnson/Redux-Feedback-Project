{"version":3,"sources":["components/Results/Results.js","components/Feelings/Feelings.js","components/Understanding/Understanding.js","components/Support/Support.js","components/Comments/Comments.js","components/Finished/Finished.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["Results","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateFinish","event","console","log","feedBack","feeling","reduxStore","feelingsReducer","understanding","understandingReducer","support","supportReducer","comments","commentReducer","axios","method","url","data","then","response","catch","error","history","push","state","finished","outPut","feedbackReducer","react_default","a","createElement","Button_default","variant","color","disabled","onClick","Card_default","className","CardContent_default","index_es","component","style","justifyContent","Component","connect","Feelings","updateFeelings","setState","feelingsStatus","target","value","clickToUpdateFellings","action","type","payload","dispatch","onChange","components_Results_Results","Understanding","updateUnderstanding","understandingStatus","clickToUpdateUnderstanding","UnderstandingStatus","Support","updateSupport","supportStatus","clickToUpdateSupport","Comments","clickToUpdateComment","setComment","setFeedback","commentAction","feedbackAction","updateComment","Finished","App","HashRouter","Route","exact","path","componenet","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qXAUMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaVQ,aAAe,SAACC,GACZC,QAAQC,IAAK,cACb,IAAIC,EAAW,CACPC,QAASZ,EAAKD,MAAMc,WAAWC,gBAC/BC,cAAef,EAAKD,MAAMc,WAAWG,qBACrCC,QAASjB,EAAKD,MAAMc,WAAWK,eAC/BC,SAASnB,EAAKD,MAAMc,WAAWO,gBAEvCX,QAAQC,IAAI,UACZW,IAAM,CACFC,OAAQ,OACRC,IAAK,YACLC,KAAMb,IACPc,KAAK,SAACC,GACLjB,QAAQC,IAAIgB,KACbC,MAAM,SAACC,GACNnB,QAAQC,IAAI,8BAA+BkB,KAE/C5B,EAAKD,MAAM8B,QAAQC,KAAK,cA9BxB9B,EAAK+B,MAAQ,CACLnB,QAAS,EACTG,cAAe,EACfE,QAAS,EACTE,SAAU,GACVa,UAAU,GAPHhC,wEAqCf,IAAIiC,EAgBJ,OAf8C,IAA1C9B,KAAKJ,MAAMc,WAAWqB,gBACtBD,EAAUE,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACNG,QAAQ,YACRC,MAAM,YACNC,UAAQ,GAHF,eAMuC,IAA1CtC,KAAKJ,MAAMc,WAAWqB,kBAC7BD,EAAUE,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,QAAQ,YACtBG,QAASvC,KAAKI,aACdiC,MAAM,WAFA,WAQVL,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAU,gBACZT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,UAAU,MAClBZ,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,UAAU,KAAtB,aACe5C,KAAKJ,MAAMc,WAAWC,iBAErCqB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,UAAU,KAAtB,kBACoB5C,KAAKJ,MAAMc,WAAWG,sBAE1CmB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,UAAU,KAAtB,YACc5C,KAAKJ,MAAMc,WAAWK,gBAEpCiB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAYC,UAAU,KAAtB,aACe5C,KAAKJ,MAAMc,WAAWO,gBAErCe,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaE,MAAO,CAAEC,eAAgB,WACjChB,YA1EHiB,aA2FPC,cAHc,SAACtC,GAC1B,MAAO,CAAEA,WAAYA,IAEVsC,CAA8BrD,GC7FvCsD,cAEF,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,IACfpD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmD,GAAA9C,KAAAH,KAAMJ,KAOVsD,eAAiB,SAAC7C,GACdR,EAAKsD,SAAS,CACVC,eAAgB/C,EAAMgD,OAAOC,SAVlBzD,EAcnB0D,sBAAwB,SAAClD,GACrB,IAAMmD,EAAS,CACXC,KAAM,eACNC,QAAS7D,EAAK+B,MAAMwB,gBAExBvD,EAAKD,MAAM+D,SAASH,GACpB3D,EAAKsD,SAAS,CACVC,eAAgB,KAEpBvD,EAAKD,MAAM8B,QAAQC,KAAK,mBArBxB9B,EAAK+B,MAAQ,CACTwB,eAAgB,GAHLvD,wEA+Bf,OACImC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACAD,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAU,sBACZT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,SAAO0B,SAAU5D,KAAKkD,eAAgBO,KAAK,YAE/CzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaE,MAAO,CAACC,eAAgB,WACjCd,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQQ,UAAU,oBAAoBL,QAAQ,YAAYC,MAAM,YAAYE,QAASvC,KAAKuD,uBAA1F,WAMRvB,EAAAC,EAAAC,cAAC2B,EAAD,cArDOd,aAkERC,cAHc,SAACtC,GAC1B,MAAO,CAAEA,WAAYA,IAEVsC,CAA8BC,GCjEvCa,cAEF,SAAAA,EAAYlE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IACfjE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgE,GAAA3D,KAAAH,KAAMJ,KAOVmE,oBAAsB,SAAC1D,GACnBR,EAAKsD,SAAS,CACVa,oBAAqB3D,EAAMgD,OAAOC,SAVvBzD,EAcnBoE,2BAA6B,SAAC5D,GAC1B,IAAMmD,EAAS,CACXC,KAAM,oBACNC,QAAS7D,EAAK+B,MAAMoC,qBAExBnE,EAAKD,MAAM+D,SAASH,GACpB3D,EAAKsD,SAAS,CACVa,oBAAqB,KAEzBnE,EAAKD,MAAM8B,QAAQC,KAAK,aArBxB9B,EAAK+B,MAAQ,CACTsC,oBAAqB,GAHVrE,wEA+Bf,OACQmC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAU,2BAChBT,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,2DAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,SAAO0B,SAAU5D,KAAK+D,oBAAqBN,KAAK,YAEpDzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaE,MAAO,CAAEC,eAAgB,WAClCd,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQQ,UAAU,yBAAyBL,QAAQ,YAAYC,MAAM,YAAYE,QAASvC,KAAKiE,4BAA/F,WAMZjC,EAAAC,EAAAC,cAAC2B,EAAD,cArDYd,aA+DbC,cAHc,SAACtC,GAC1B,MAAO,CAAEA,WAAYA,IAEVsC,CAA8Bc,GC/DvCK,cAEF,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACftE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMJ,KAOVwE,cAAgB,SAAC/D,GACbR,EAAKsD,SAAS,CACVkB,cAAehE,EAAMgD,OAAOC,SAVjBzD,EAcnByE,qBAAuB,SAACjE,GACpB,IAAMmD,EAAS,CACXC,KAAM,cACNC,QAAS7D,EAAK+B,MAAMyC,eAExBxE,EAAKD,MAAM+D,SAASH,GACpB3D,EAAKsD,SAAS,CACVkB,cAAe,KAEnBxE,EAAKD,MAAM8B,QAAQC,KAAK,cArBxB9B,EAAK+B,MAAQ,CACTyC,cAAe,GAHJxE,wEA+Bf,OACImC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAU,qBAChBT,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,8CAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,SAAO0B,SAAU5D,KAAKoE,cAAeX,KAAK,YAE9CzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaE,MAAO,CAACC,eAAgB,WACjCd,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQQ,UAAU,mBAAmBL,QAAQ,YAAYC,MAAM,YAAYE,QAASvC,KAAKsE,sBAAzF,WAMZtC,EAAAC,EAAAC,cAAC2B,EAAD,cArDUd,aA+DPC,cAHc,SAACtC,GAC1B,MAAO,CAAEA,WAAYA,IAEVsC,CAA8BmB,GChEvCI,cAEF,SAAAA,EAAY3E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuE,IACf1E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyE,GAAApE,KAAAH,KAAMJ,KAWV4E,qBAAuB,SAACnE,GACpB,IAAIqD,EAAU,GACdA,EAAQe,WAAa5E,EAAK+B,MAAM6C,WAChCf,EAAQgB,YAAc7E,EAAK+B,MAAM8C,YAEjC,IAAMC,EAAgB,CAClBlB,KAAM,cACNC,QAASA,EAAQe,YAEfG,EAAiB,CACnBnB,KAAM,eACNC,QAASA,EAAQgB,aAErB7E,EAAKD,MAAM+D,SAASgB,GACpB9E,EAAKD,MAAM+D,SAASiB,GACpB/E,EAAKsD,SAAS,CACVsB,WAAY,GACZC,aAAa,IAEjB7E,EAAKD,MAAM8B,QAAQC,KAAK,aA/BT9B,EAmCnBgF,cAAgB,SAACxE,GACbR,EAAKsD,SAAS,CACVsB,WAAYpE,EAAMgD,OAAOC,MACzBoB,aAAa,KApCjB7E,EAAK+B,MAAQ,CACT6C,WAAY,IACZC,aAAa,GAJF7E,wEAiDf,OACImC,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMQ,UAAU,qBAChBT,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAAA,oDAEJF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,gBAEIX,EAAAC,EAAAC,cAAA,SAAO0B,SAAU5D,KAAK6E,cAAepB,KAAK,UAE9CzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaE,MAAO,CAACC,eAAgB,WACjCd,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQQ,UAAU,mBACVL,QAAQ,YACRC,MAAM,YACNE,QAASvC,KAAKwE,sBAHtB,WASZxC,EAAAC,EAAAC,cAAC2B,EAAD,cA3EWd,aAsFRC,cAHc,SAACtC,GAC1B,MAAO,CAAEA,WAAYA,IAEVsC,CAA8BuB,GCtE9BO,mLAfP,OACI9C,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACID,EAAAC,EAAAC,cAACS,EAAA,EAAD,qBAPGI,aC+BRgC,mLAtBX,OACE/C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,aAAd,aACAT,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,+BAENF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIvC,UAAWK,IACjCjB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBvC,UAAWkB,IAC9C9B,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWvC,UAAWuB,IACxCnC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYvC,UAAW2B,IACzCvC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWvC,UAAWjD,IACxCqC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,WAAYN,cAhBpC/B,aCFZsC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtE,KAAK,SAAA0E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtE,QACfiE,UAAUC,cAAcO,WAK1B/F,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBiB,MAAM,SAAAC,GACLnB,QAAQmB,MAAM,4CAA6CA,kCC7B3D6E,EAAgBC,YAClBC,YAAgB,CAEZ7F,gBAzCgB,WAAuB,IAAtBiB,EAAsB6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGjD,EAAWiD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,MAAoB,iBAAhBnD,EAAOC,KACAD,EAAOE,QAEX9B,GAsCHf,qBAnCqB,WAAuB,IAAtBe,EAAsB6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGjD,EAAWiD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,MAAoB,sBAAhBnD,EAAOC,KACAD,EAAOE,QAEX9B,GAgCHb,eA9Be,WAAuB,IAAtBa,EAAsB6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGjD,EAAWiD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,MAAoB,gBAAhBnD,EAAOC,KACAD,EAAOE,QAEX9B,GA2BHX,eAzBe,WAAyB,IAAxBW,EAAwB6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,IAAKjD,EAAWiD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,MAAoB,gBAAhBnD,EAAOC,KACAD,EAAOE,QAEX9B,GAsBHG,gBAnBgB,WAA2B,IAA1BH,EAA0B6E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXjD,EAAWiD,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,MAAoB,iBAAhBnD,EAAOC,KACAD,EAAOE,QAEX9B,KAkBPgF,YAAgBC,MAIpBC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAUC,MAAOX,GAAetE,EAAAC,EAAAC,cAACgF,EAAD,OAAoBC,SAASC,eAAe,SD5C7E,WACb,GAA6C,kBAAmBvB,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,GAAwB/B,OAAOC,UAC3C+B,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAA6B,OAAMH,GAAN,sBAEPjC,GAiDV,SAAiCO,GAE/B8B,MAAM9B,GACHtE,KAAK,SAAAC,GAGkB,MAApBA,EAASoG,SACuD,IAAhEpG,EAASqG,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjC,UAAUC,cAAciC,MAAMzG,KAAK,SAAA0E,GACjCA,EAAagC,aAAa1G,KAAK,WAC7BiE,OAAOC,SAASyC,aAKpBtC,EAAgBC,KAGnBpE,MAAM,WACLlB,QAAQC,IACN,mEArEA2H,CAAwBtC,GAIxBC,UAAUC,cAAciC,MAAMzG,KAAK,WACjChB,QAAQC,IACN,+GAMJoF,EAAgBC,MCiBxBuC","file":"static/js/main.89689c60.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport { Typography, CardActions } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\n// import Finished from './../Finished/Finished.js';\n\n// state set to all variables so I can send it through axios \nclass Results extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n                feeling: 0,\n                understanding: 0,\n                support: 0,\n                comments: '',\n                finished: false\n            }\n        }\n        \n    \n\n    // sends used to the finished page\n    updateFinish = (event) => {\n        console.log( 'axios Post')\n        let feedBack = {\n                feeling: this.props.reduxStore.feelingsReducer,\n                understanding: this.props.reduxStore.understandingReducer,\n                support: this.props.reduxStore.supportReducer,\n                comments:this.props.reduxStore.commentReducer\n        };\n        console.log('axios2')\n        axios({\n            method: 'POST',\n            url: '/feedback',\n            data: feedBack\n        }).then((response) => {\n            console.log(response);\n        }).catch((error) => {\n            console.log('server error for axios POST', error);\n        })\n        this.props.history.push('/finished');\n    }\n\n    render() {\n        // conditional rendering to update button status\n        let outPut;\n        if (this.props.reduxStore.feedbackReducer === false) {\n            outPut = (<Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled>\n                Incomplete\n                </Button>)\n        } else if (this.props.reduxStore.feedbackReducer === true) {\n            outPut = (<Button variant=\"contained\"\n                onClick={this.updateFinish}\n                color=\"primary\" >\n                Submit\n                     </Button>)\n        }\n    \n        return (\n            <Card className=\"results-card\">\n                <CardContent>\n                    <Typography component=\"h2\">\n                        <h2>Review Your FeedBack</h2>\n                    </Typography>\n                    <Typography component=\"p\">\n                        Fellings: {this.props.reduxStore.feelingsReducer}\n                    </Typography>\n                    <Typography component=\"p\">\n                        Understanding: {this.props.reduxStore.understandingReducer}\n                    </Typography>\n                    <Typography component=\"p\">\n                        Support: {this.props.reduxStore.supportReducer}\n                    </Typography>\n                    <Typography component=\"p\">\n                        Comments: {this.props.reduxStore.commentReducer}\n                    </Typography>\n                    <br />\n                    <CardActions style={{ justifyContent: 'center' }}>\n                        {outPut}\n                    </CardActions>\n                </CardContent>\n            </Card>\n\n        ) //end return\n    } // end render\n\n\n\n\n\n\n}//end class component\nconst mapReduxStoreToProps = (reduxStore) => {\n    return { reduxStore: reduxStore };\n}\nexport default connect(mapReduxStoreToProps)(Results);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport { Typography, CardActions } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Results from './../Results/Results.js';\n\nclass Feelings extends Component {\n    // this.state.feelingStatus\n    constructor(props) {\n        super(props);\n        this.state = {\n            feelingsStatus: 0\n        }\n    }\n\n    // function to pudate feelings status, not appended until click\n    updateFeelings = (event) => {\n        this.setState({\n            feelingsStatus: event.target.value,\n        })\n    }\n    // click handler to update feelings to append on the Results\n    clickToUpdateFellings = (event) => {\n        const action = {\n            type: 'SET_FEELINGS',\n            payload: this.state.feelingsStatus,\n        };\n        this.props.dispatch(action);\n        this.setState({\n            feelingsStatus: '',\n        })\n        this.props.history.push('/understanding');\n    }\n\n\n\n\n    render() {\n        \n        return (\n            <Card>\n            <Card className=\"feelings-container\">\n                <CardContent>\n                    <Typography>                  \n                        <h2>How are you feeling?</h2>\n                    </Typography>\n                    <br/>\n                    <Typography>\n                        <input onChange={this.updateFeelings} type=\"number\"></input>    \n                    </Typography>\n                    <br/>\n                    <br/>\n                    <CardActions style={{justifyContent: 'center'}}>\n                        <Button className=\"fellings-Next-btn\" variant=\"contained\" color=\"secondary\" onClick={this.clickToUpdateFellings}>\n                            Next\n                        </Button>\n                    </CardActions>\n                </CardContent>\n                </Card>\n                <Results/>\n                </Card>\n\n\n        \n        )\n    }\n\n\n}\nconst mapReduxStoreToProps = (reduxStore) => {\n    return { reduxStore: reduxStore };\n} //end class component\nexport default connect(mapReduxStoreToProps)(Feelings)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport { Typography, CardActions } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Results from './../Results/Results.js';\n\n\nclass Understanding extends Component {\n    // this.state.understandingStatus\n    constructor(props) {\n        super(props);\n        this.state = {\n            UnderstandingStatus: 0\n        }\n    }\n\n    // function to pudate understanding status, not appended until click\n    updateUnderstanding = (event) => {\n        this.setState({\n            understandingStatus: event.target.value,\n        })\n    }\n    // click handler to update understanding to append on the Results and send to the store\n    clickToUpdateUnderstanding = (event) => {\n        const action = {\n            type: 'SET_UNDERSTANDING',\n            payload: this.state.understandingStatus,\n        };\n        this.props.dispatch(action);\n        this.setState({\n            understandingStatus: '',\n        })\n        this.props.history.push('/support');\n    }\n\n\n\n\n    render() {\n\n        return (\n                <Card className=\"understanding-container\">\n                <Card>\n                    <CardContent>\n                        <Typography>\n                            <h2>How well are you understanding the material?</h2>\n                        </Typography>\n                        <br />\n                        <Typography>\n                            <input onChange={this.updateUnderstanding} type=\"number\"></input>\n                        </Typography>\n                        <br />\n                        <br />\n                        <CardActions style={{ justifyContent: 'center' }}>\n                            <Button className=\"understanding-Next-btn\" variant=\"contained\" color=\"secondary\" onClick={this.clickToUpdateUnderstanding}>\n                                Next\n                        </Button>\n                        </CardActions>\n                    </CardContent>\n                </Card>\n                <Results/>\n                </Card>\n        )\n    }\n\n\n}\nconst mapReduxStoreToProps = (reduxStore) => {\n    return { reduxStore: reduxStore };\n} //end class component\nexport default connect(mapReduxStoreToProps)(Understanding)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport { Typography, CardActions } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Results from './../Results/Results.js';\n\n\nclass Support extends Component {\n    // this.state.understandingStatus\n    constructor(props) {\n        super(props);\n        this.state = {\n            supportStatus: 0\n        }\n    }\n\n    // function to update support status, not appended until click\n    updateSupport = (event) => {\n        this.setState({\n            supportStatus: event.target.value,\n        })\n    }\n    // click handler to update support to append on the Results by sending it to the store.\n    clickToUpdateSupport = (event) => {\n        const action = {\n            type: 'SET_SUPPORT',\n            payload: this.state.supportStatus,\n        };\n        this.props.dispatch(action);\n        this.setState({\n            supportStatus: '',\n        })\n        this.props.history.push('/comments');\n    }\n\n\n\n\n    render() {\n        \n        return (\n            <Card className=\"support-container\">\n            <Card>\n                <CardContent>\n                    <Typography>                  \n                        <h2>How well do you feel supported?</h2>\n                    </Typography>\n                    <br/>\n                    <Typography>\n                        <input onChange={this.updateSupport} type=\"number\"></input>\n                    </Typography>\n                    <br/>\n                    <br/>\n                    <CardActions style={{justifyContent: 'center'}}>\n                        <Button className=\"support-Next-btn\" variant=\"contained\" color=\"secondary\" onClick={this.clickToUpdateSupport}>\n                            Next\n                        </Button>\n                    </CardActions>\n                </CardContent>\n            </Card>   \n            <Results/>\n            </Card>    \n        )\n    }\n\n\n}\nconst mapReduxStoreToProps = (reduxStore) => {\n    return { reduxStore: reduxStore };\n} //end class component\nexport default connect(mapReduxStoreToProps)(Support)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport { Typography, CardActions } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Results from './../Results/Results.js';\n\nclass Comments extends Component {\n    // this.state.commentStatus\n    constructor(props) {\n        super(props);\n        this.state = {\n            setComment: ' ',\n            setFeedback: false\n        \n    }\n}\n\n    \n\n    // function to update comment status, not appended until click\n    clickToUpdateComment = (event) => {\n        let payload = {};\n        payload.setComment = this.state.setComment;\n        payload.setFeedback = this.state.setFeedback;\n\n        const commentAction = {\n            type: 'SET_COMMENT',\n            payload: payload.setComment,                    \n        };\n        const feedbackAction = {\n            type: 'SET_FEEDBACK',\n            payload: payload.setFeedback,                    \n        };\n        this.props.dispatch(commentAction);\n        this.props.dispatch(feedbackAction);\n        this.setState({\n            setComment: '',\n            setFeedback: true,\n        })\n        this.props.history.push('/results');\n    }\n\n\n    updateComment = (event) => {\n        this.setState({\n            setComment: event.target.value,\n            setFeedback: true\n        })\n    }\n\n   \n\n\n\n\n    render() {\n        \n        return (\n            <Card className=\"comment-container\">\n            <Card>\n                <CardContent>\n                    <Typography>                  \n                        <h2>Any comments you would like to leave?</h2>\n                    </Typography>\n                    <br/>\n                    <Typography>\n                        comments\n                        <input onChange={this.updateComment} type=\"text\"></input>\n                    </Typography>\n                    <br/>\n                    <br/>\n                    <CardActions style={{justifyContent: 'center'}}>\n                        <Button className=\"comment-Next-btn\"\n                                variant=\"contained\" \n                                color=\"secondary\" \n                                onClick={this.clickToUpdateComment}>\n                            Next\n                        </Button>\n                    </CardActions>\n                </CardContent>\n            </Card>\n            <Results/>\n            </Card>\n            \n        )\n    }\n    \n\n} //end class component\nconst mapReduxStoreToProps = (reduxStore) => {\n    return { reduxStore: reduxStore };\n}\nexport default connect(mapReduxStoreToProps)(Comments)","import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport { Typography } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Finished extends Component { \n  // I have tried many thing and nothing will show up on the page.\n  // this page is no different than ant of the others. I cannot figure it out.  \n    render(){\n        return(\n            <Card>\n                <CardContent>\n                    <Typography>\n                        Hey\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n\n\n\n} // end of class component \nexport default Finished;","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Feelings from './../Feelings/Feelings.js'; //Feelings page added\nimport Understanding from './../Understanding/Understanding.js';//Understanding page added\nimport Support from './../Support/Support.js'; //Support page added\nimport Comments from './../Comments/Comments.js'; // Comments page added\nimport Results from './../Results/Results.js';  //Results page added\nimport Finished from './../Finished/Finished.js'; // Finished page added\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Feedback!</h1>\n          <h4><i>Don't forget it!</i></h4>\n        </header>\n        <br />\n        <Router>\n          <div>\n            <Route exact path=\"/\" component={Feelings} />\n            <Route exact path=\"/understanding\" component={Understanding} />\n            <Route exact path=\"/support\" component={Support} />\n            <Route exact path=\"/comments\" component={Comments} />\n            <Route exact path=\"/results\" component={Results} />\n            <Route exact path=\"/finished\" componenet={Finished} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport logger from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n\n\n\n\nconst feelingsReducer = (state = 0, action) => {\n    if (action.type === 'SET_FEELINGS') {\n        return action.payload;\n    }\n    return state;\n};\n\nconst understandingReducer = (state = 0, action) => {\n    if (action.type === 'SET_UNDERSTANDING') {\n        return action.payload;\n    }\n    return state;\n};\nconst supportReducer = (state = 0, action) => {\n    if (action.type === 'SET_SUPPORT') {\n        return action.payload;\n    }\n    return state;\n};\nconst commentReducer = (state = ' ', action) => {\n    if (action.type === 'SET_COMMENT') {\n        return action.payload;\n    }\n    return state;\n};\n\nconst feedbackReducer = (state = false, action) => {\n    if (action.type === 'SET_FEEDBACK') {\n        return action.payload;\n    }\n    return state;\n}\n\n\n\n\n\n// store of reducers\nconst storeInstance = createStore(\n    combineReducers({\n        //store reducers here\n        feelingsReducer,\n        understandingReducer,\n        supportReducer,\n        commentReducer,\n        feedbackReducer\n\n    }),\n    applyMiddleware(logger),\n);\n\n// updated with provider and store \nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}